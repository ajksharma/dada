    let kArrow = ./../../caterwaul/Function/Kind

in  let object = Type

in  let arrow = ./../../caterwaul/Function/Type

in  let category = ./../../caterwaul/Function/category

in  let Endofunctor = ./../../caterwaul/Functor/Endo/Type object arrow

in  let Tuple = ./../../caterwaul/Tuple/Type

in  let Tuple/comonad = ./../../caterwaul/Tuple/comonad

in  let Tuple/endofunctor =
          ./../../caterwaul/Tuple/functor/endo/star
          (./../../caterwaul/Identity/Type object)
          (./../../caterwaul/Identity/functor/endo object arrow)

in    λ(t : object)
    → λ(base : kArrow object object)
    → λ(functor : Endofunctor base)
    → λ(recursive : ./../Recursive/Type object arrow t base)
    → λ(b : object)
    → λ(helperAlgebra : arrow { _1 = base b, _2 = b })
    → ./../Recursive/gcata
      object
      arrow
      category
      t
      base
      functor
      recursive
      (λ(c : object) → Tuple { _1 = b, _2 = c })
      (Tuple/comonad b)
      (Tuple/endofunctor b)
      (./../DistributiveLaw/tuple base functor b helperAlgebra)
