    let XNor = ./Type

in  let Functor =
          ./../../dhall-bhat/Functor/Pair/Type
          Type
          ./../../dhall-bhat/Function/Type

in    { map =
            λ(b : { _1 : Type, _2 : Type })
          → λ(c : { _1 : Type, _2 : Type })
          → λ(f : { _1 : b._1 → c._1, _2 : b._2 → c._2 })
          → λ(fa : XNor b._1 b._2)
          →     let X = constructors (XNor c._1 c._2)
            
            in  merge
                { Both =
                      λ(xn : { head : b._1, tail : b._2 })
                    → X.Both { head = f._1 xn.head, tail = f._2 xn.tail }
                , Neither =
                    X.Neither
                }
                fa
      }
    : Functor XNor
