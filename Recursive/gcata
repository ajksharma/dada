{- FIXME: `functor2` should be replaced by `comonad.{map}`
-}
    let kArrow = ./../../caterwaul/Function/Kind

in  let kProduct = ./../../caterwaul/Tuple/Kind

in    λ(object : Kind)
    → λ(arrow : kArrow (kProduct object object) Type)
    → λ(category : ./../../caterwaul/Category/Type object arrow)
    →     let Comonad = ./../../caterwaul/Comonad/Type object arrow
      
      in  let Endofunctor = ./../../caterwaul/Functor/Endo/Type object arrow
      
      in  let Identity = ./../../caterwaul/Identity/Type object
      
      in  let Identity/functor =
                ./../../caterwaul/Identity/functor/endo object arrow
      
      in  let Identity/monad =
                ./../../caterwaul/Identity/monad object arrow category
      
      in    λ(t : object)
          → λ(base : kArrow object object)
          → λ(functor : Endofunctor base)
          → λ(recursive : ./Type object arrow t base)
          → λ(w : kArrow object object)
          → λ(comonad : Comonad w)
          → λ(functor2 : Endofunctor w)
          → ./gcataM
            object
            arrow
            category
            t
            base
            functor
            recursive
            Identity
            Identity/functor
            Identity/monad
            functor
            w
            comonad
            functor2
