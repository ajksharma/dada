{- All folds are equally powerful, but this one gives us the easiest way to
   define the others.
-}
let kArrow =
      https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

in  let kProduct =
          https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8
    
    in    λ ( object
            : Kind
            )
        → λ(arrow : kArrow (kProduct object object) Type)
        → λ ( category
            : https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Category/Type sha256:56874495587bd8bf58b702382562e4aed91603b64a2d6893413c72d5bf265596
              object
              arrow
            )
        → let Comonad =
                https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Comonad/Type sha256:f4df0fb438550e7ab95bad1373735669107b4d3027365755ed77d8dd5aea40b9
                object
                arrow
          
          in  let Endofunctor =
                    https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Functor/Endo/Type sha256:f230e076c15a9ae4eb91c84519b9ab384e03b03f0246ebe4dfdf3a2bb82b251a
                    object
                    arrow
              
              in  let Monad =
                        https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Monad/Type sha256:8001bfc30d9f2c2126215a85e75eb12648fabceb5ea6cdcb05d599256d8dc1bf
                        object
                        arrow
                  
                  in  let Starfunctor =
                            https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Functor/Endo/Star/Type sha256:bda0cae973d2e4f314fc165f8b7cd96d87f642bc9ce2b22569cac97346068717
                            object
                            arrow
                      
                      in    λ ( t
                              : object
                              )
                          → λ(base : kArrow object object)
                          → λ ( functor2
                              : https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Functor/Endo/Type sha256:f230e076c15a9ae4eb91c84519b9ab384e03b03f0246ebe4dfdf3a2bb82b251a
                                object
                                arrow
                                base
                              )
                          → λ ( recursive
                              : ./Type sha256:64e298030b917c0190a219faa415de12632b0d3b2d7660187225637caa22c0ed
                                object
                                arrow
                                t
                                base
                              )
                          → λ(m : kArrow object object)
                          → λ(efunctor : Endofunctor m)
                          → λ(monad : Monad m)
                          → λ(sfunctor : Starfunctor m base)
                          → λ(w : kArrow object object)
                          → λ(comonad : Comonad w)
                          → λ(traverse : Starfunctor m w)
                          → λ ( k
                              : ./../DistributiveLaw/Type sha256:7064f282eb1dc7867af71cb0254c0d516799b4f456b38ab67989e8038bb5c320
                                object
                                arrow
                                base
                                w
                              )
                          → λ(a : object)
                          → λ(algebra : arrow { _1 = base (w a), _2 = m a })
                          → category.op
                            { _1 = t, _2 = m a }
                            (   λ ( r
                                  : Type
                                  )
                              → λ ( arrowsOut
                                  :   ∀(z : object)
                                    → arrow { _1 = z, _2 = m a }
                                    → arrow { _1 = t, _2 = z }
                                    → r
                                  )
                              → arrowsOut
                                (m (w a))
                                (efunctor.map (w a) a (comonad.identity a))
                                ( ./cataM sha256:6214ca03abf362045949eb0ca433f96f04a53c46caaeb508de238abc181e32a6
                                  object
                                  arrow
                                  category
                                  t
                                  base
                                  recursive
                                  m
                                  efunctor
                                  monad
                                  sfunctor
                                  (w a)
                                  ( category.op
                                    { _1 = base (w a), _2 = m (w a) }
                                    (   λ(r : Type)
                                      → λ ( arrowsOut
                                          :   ∀(z : object)
                                            → arrow { _1 = z, _2 = m (w a) }
                                            → arrow { _1 = base (w a), _2 = z }
                                            → r
                                          )
                                      → arrowsOut
                                        (w (base (w a)))
                                        (traverse.map (base (w a)) a algebra)
                                        ( category.op
                                          { _1 =
                                              base (w a)
                                          , _2 =
                                              w (base (w a))
                                          }
                                          (   λ(r : Type)
                                            → λ ( arrowsOut
                                                :   ∀(z : object)
                                                  → arrow
                                                    { _1 =
                                                        z
                                                    , _2 =
                                                        w (base (w a))
                                                    }
                                                  → arrow
                                                    { _1 = base (w a), _2 = z }
                                                  → r
                                                )
                                            → arrowsOut
                                              (base (w (w a)))
                                              (k (w a))
                                              ( functor2.map
                                                (w a)
                                                (w (w a))
                                                (comonad.op a)
                                              )
                                          )
                                        )
                                    )
                                  )
                                )
                            )
