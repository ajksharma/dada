--     let Bifunctor = ./../dhall-bhat/Functor/Bifunctor/Type

-- in  let Bifunctor/first = ./../dhall-bhat/Functor/Bifunctor/terms.dhallfirst

-- in  let Bifunctor/second = ./../dhall-bhat/Functor/Bifunctor/second

-- in  let Functor = ./../dhall-bhat/Functor/Type

-- in    λ(f : Type → Type → Type)
--     → λ(functor : Bifunctor f)
--     →   { map =
--               λ(a : Type)
--             → λ(b : Type)
--             → λ(fn : a → b)
--             → (./recursive (f a)).cata
--               (./Type (f b))
--               (   λ(fa : f a (./Type (f b)))
--                 → ( ./steppable (f b) { map = Bifunctor/second f functor b }
--                   ).embed
--                   (Bifunctor/first f functor a (./Type (f b)) b fn fa)
--               )
--         }
--       : Functor (λ(a : Type) → ./Type (f a))
<>
