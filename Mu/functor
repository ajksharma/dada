    let kArrow = ./../../dhall-bhat/Function/Kind

in  let kProduct = ./../../dhall-bhat/Tuple/Kind

in    λ(object : Kind)
    → λ(arrow : kArrow (kProduct object object) Type)
    →     let Set =
                ./../../dhall-bhat/uncurryT
                Type
                Type
                Type
                ./../../dhall-bhat/Function/Type
      
      in  let Set/category = ./../../dhall-bhat/Function/category
      
      in  let Functor = ./../../dhall-bhat/Functor/Type object Type arrow Set
      
      in    λ(f : kArrow (kProduct object Type) Type)
          → λ ( functor
              : ∀(x : Type) → Functor (λ(a : object) → f { _1 = a, _2 = x })
              )
          →   { map =
                    λ(a : object)
                  → λ(b : object)
                  → λ(fn : arrow { _1 = a, _2 = b })
                  → λ(ma : ./Type (λ(r : Type) → f { _1 = a, _2 = r }))
                  → λ(x : Type)
                  → λ(phi : f { _1 = b, _2 = x } → x)
                  → ma
                    x
                    ( Set/category.op
                      { _1 = f { _1 = a, _2 = x }, _2 = x }
                      (   λ(r : Type)
                        → λ ( arrowsOut
                            :   ∀(z : Type)
                              → (z → x)
                              → (f { _1 = a, _2 = x } → z)
                              → r
                            )
                        → arrowsOut
                          (f { _1 = b, _2 = x })
                          phi
                          ((functor x).map a b fn)
                      )
                    )
              }
            : Functor
              (λ(a : object) → ./Type (λ(r : Type) → f { _1 = a, _2 = r }))
