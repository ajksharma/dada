  λ(object : Kind)
→ λ(arrow : object → object → Type)
→ λ(category : ./../../dhall-bhat/Category/Type object arrow)
→     let Set = ./../../dhall-bhat/Function/Type
  
  in  let Set/category = ./../../dhall-bhat/Function/category
  
  in  let Bifunctor =
            ./../../dhall-bhat/Functor/Bifunctor/Type
            object
            Type
            Type
            arrow
            Set
            Set
  
  in  let Bifunctor/terms =
            ./../../dhall-bhat/Functor/Bifunctor/terms.dhall
            object
            arrow
            category
            Type
            Set
            Set/category
            Type
            Set
  
  in  let Functor = ./../../dhall-bhat/Functor/Type object Type arrow Set
  
  in    λ(f : object → Type → Type)
      → λ(functor : Bifunctor f)
      →     let Bifunctor/first = (Bifunctor/terms f functor).first
        
        in    { map =
                    λ(a : object)
                  → λ(b : object)
                  → λ(fn : arrow a b)
                  → λ(ma : ./Type (f a))
                  → λ(x : Type)
                  → λ(phi : f b x → x)
                  → ma
                    x
                    ( Set/category.op
                      (f a x)
                      x
                      (   λ(r : Type)
                        → λ(arrowsOut : ∀(z : Type) → (z → x) → (f a x → z) → r)
                        → arrowsOut (f b x) phi (Bifunctor/first x a b fn)
                      )
                    )
              }
            : Functor (λ(a : object) → ./Type (f a))
