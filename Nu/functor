  λ(object : Kind)
→ λ(arrow : object → object → Type)
→ λ(category : ./../../dhall-bhat/Category/Type object arrow)
→     let Set = ./../../dhall-bhat/Function/Type
  
  in  let Set/category = ./../../dhall-bhat/Function/category
  
  in  let Bifunctor =
            ./../../dhall-bhat/Functor/Bifunctor/Type
            object
            Type
            Type
            arrow
            Set
            Set
  
  in  let Bifunctor/terms =
            ./../../dhall-bhat/Functor/Bifunctor/terms.dhall
            object
            arrow
            category
            Type
            Set
            Set/category
            Type
            Set
  
  in  let Functor = ./../../dhall-bhat/Functor/Type object Type arrow Set
  
  in    λ(f : object → Type → Type)
      → λ(functor : Bifunctor f)
      →     let Bifunctor/first = (Bifunctor/terms f functor).first
        
        in    { map =
                    λ(a : object)
                  → λ(b : object)
                  → λ(fn : arrow a b)
                  → λ(nu : ./Type (f a))
                  → λ(r : Type)
                  → λ ( unfold
                      : ∀(z : Type) → { coalgebra : z → f b z, seed : z } → r
                      )
                  → nu
                    r
                    (   λ(y : Type)
                      → λ(nub : { coalgebra : y → f a y, seed : y })
                      → unfold
                        y
                        { coalgebra =
                            Set/category.op
                            y
                            (f b y)
                            (   λ(r : Type)
                              → λ ( arrowsOut
                                  : ∀(z : Type) → (z → f b y) → (y → z) → r
                                  )
                              → arrowsOut
                                (f a y)
                                (Bifunctor/first y a b fn)
                                nub.coalgebra
                            )
                        , seed =
                            nub.seed
                        }
                    )
              }
            : Functor (λ(a : object) → ./Type (f a))
