    let Functor = ./../../dhall-bhat/Functor/Endo/Set

in    λ(f : Type → Type)
    → λ(functor : Functor f)
    →     let project =
                  λ(t : ./Type f)
                → t
                  (f (./Type f))
                  (   λ(a : Type)
                    → λ(tt : { coalgebra : a → f a, seed : a })
                    → functor.map
                      a
                      (./Type f)
                      (   λ(x : a)
                        → λ(r : Type)
                        → λ ( fn
                            :   ∀(a : Type)
                              → { coalgebra : a → f a, seed : a }
                              → r
                            )
                        → fn a (tt ⫽ { seed = x })
                      )
                      (tt.coalgebra tt.seed)
                  )
      
      in    { embed =
                ./../colambek
                Type
                ./../../dhall-bhat/Function/Type
                (./Type f)
                f
                functor
                (./corecursive f).cata
                project
            , project =
                project
            }
          : ./../Steppable/Type
            Type
            ./../../dhall-bhat/Function/Type
            (./Type f)
            f
