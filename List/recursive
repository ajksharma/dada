    let XNor = ./../XNor/Type

in    λ(a : Type)
    →   { cata =
              λ(b : Type)
            → λ ( alg
                : ./../algebra
                  Type
                  ./../../caterwaul/Function/Type
                  (λ(c : Type) → XNor { _1 = a, _2 = c })
                  b
                )
            → λ(fa : List a)
            → List/fold
              a
              fa
              b
              (   λ(x : a)
                → λ(y : b)
                → alg < Both = { head = x, tail = y } | Neither : {} >
              )
              (alg < Neither = {=} | Both : { head : a, tail : b } >)
        }
      : ./../Recursive/Type
        Type
        ./../../caterwaul/Function/Type
        (List a)
        (λ(b : Type) → XNor { _1 = a, _2 = b })
