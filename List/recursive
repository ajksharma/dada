let XNor =
      ./../XNor/Type sha256:d8c92eb1bc64366a069ba26341c4a46d0fcf236c987de0f0ebaa0c35f2488598

in    λ ( a
        : Type
        )
    →   { cata =
              λ ( b
                : Type
                )
            → λ ( alg
                : ./../algebra sha256:78085b625b200d463a90edd4e90fe40ea3349fc6d152a22f881baf4aeed9dc49
                  Type
                  https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Function/Type sha256:44d58123a7ba6bd4f59a8f0fe8363ca585db3061ae3f369d3a26607a127f7927
                  (λ(c : Type) → XNor { _1 = a, _2 = c })
                  b
                )
            → λ(fa : List a)
            → List/fold
              a
              fa
              b
              (   λ(x : a)
                → λ(y : b)
                → alg < Both = { head = x, tail = y } | Neither : {} >
              )
              (alg < Neither = {=} | Both : { head : a, tail : b } >)
        }
      : ./../Recursive/Type sha256:64e298030b917c0190a219faa415de12632b0d3b2d7660187225637caa22c0ed
        Type
        https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Function/Type sha256:44d58123a7ba6bd4f59a8f0fe8363ca585db3061ae3f369d3a26607a127f7927
        (List a)
        (λ(b : Type) → XNor { _1 = a, _2 = b })
