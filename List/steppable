    let XNor = ./../XNor/Type

in    λ(a : Type)
    →     let embed =
                  λ(fa : XNor a (List a))
                → merge
                  { Both =
                      λ(q : { head : a, tail : List a }) → [ q.head ] # q.tail
                  , Neither =
                      λ(q : {}) → [] : List a
                  }
                  fa
      
      in    { embed =
                embed
            , project =
                ./../lambek
                Type
                ( ./../../dhall-bhat/uncurryT
                  Type
                  Type
                  Type
                  ./../../dhall-bhat/Function/Type
                )
                (List a)
                (XNor a)
                (./recursive a).cata
                embed
                ((./../XNor/terms.dhall).extractSecondFunctor a)
            }
          : ./../Steppable/Type
            Type
            ( ./../../dhall-bhat/uncurryT
              Type
              Type
              Type
              ./../../dhall-bhat/Function/Type
            )
            (List a)
            (XNor a)
