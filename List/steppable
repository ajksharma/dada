let XNor =
      ./../XNor/Type sha256:d8c92eb1bc64366a069ba26341c4a46d0fcf236c987de0f0ebaa0c35f2488598

in    λ ( a
        : Type
        )
    → let embed =
              λ(fa : XNor { _1 = a, _2 = List a })
            → merge
              { Both =
                  λ(q : { head : a, tail : List a }) → [ q.head ] # q.tail
              , Neither =
                  λ(q : {}) → [] : List a
              }
              fa
      
      in    { embed =
                embed
            , project =
                ./../lambek sha256:4ab673b2bbc6443a57fcbc7afe9588938bd4f1c936e02a2595aece8cc704d7a5
                Type
                https://raw.githubusercontent.com/sellout/caterwaul/master/Function/Type sha256:44d58123a7ba6bd4f59a8f0fe8363ca585db3061ae3f369d3a26607a127f7927
                (List a)
                (λ(b : Type) → XNor { _1 = a, _2 = b })
                ( ./recursive sha256:6e05658351d92fed240e23ebf4cdca420eee2c3c50ea5043a97d60e1989b3f6f
                  a
                ).cata
                embed
                ( ( ./../XNor/terms.dhall sha256:b34c5a0c945f9b17154b9318ee148b647c164850fe07902438c8451a41529c01
                  ).extractSecondFunctor
                  a
                )
            }
          : ./../Steppable/Type sha256:7cda69d1654ef3854e389c2674a997b6a6cec8bb95d873df2d528f7510f2becb
            Type
            https://raw.githubusercontent.com/sellout/caterwaul/master/Function/Type sha256:44d58123a7ba6bd4f59a8f0fe8363ca585db3061ae3f369d3a26607a127f7927
            (List a)
            (λ(b : Type) → XNor { _1 = a, _2 = b })
