    let kArrow = ./../../caterwaul/Function/Kind

in  let Functor =
          ./../../caterwaul/Functor/Endo/Type
          Type
          ./../../caterwaul/Function/Type

in  let Either = ./../../caterwaul/Either/Type

in    λ(f : kArrow Type Type)
    → λ(functor : Functor f)
    → λ(a : Type)
    → λ(coalgebra : a → f a)
    →   (   λ(b : Type)
          →     let E = Either { _1 = a, _2 = b }
            
            in    λ(mfa : Either { _1 = a, _2 = f b })
                → merge
                  { Left =
                        λ(x : a)
                      → functor.map
                        a
                        (Either { _1 = a, _2 = b })
                        E.Left
                        (coalgebra x)
                  , Right =
                      functor.map b (Either { _1 = a, _2 = b }) E.Right
                  }
                  mfa
        )
      : ./Type
        Type
        ./../../caterwaul/Function/Type
        (λ(b : Type) → Either { _1 = a, _2 = b })
        f
