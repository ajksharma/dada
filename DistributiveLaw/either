let kArrow =
      https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let Functor =
      https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Functor/Endo/Type sha256:f230e076c15a9ae4eb91c84519b9ab384e03b03f0246ebe4dfdf3a2bb82b251a
      Type
      https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Function/Type sha256:44d58123a7ba6bd4f59a8f0fe8363ca585db3061ae3f369d3a26607a127f7927

let Either =
      https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Either/Type sha256:9ac62b105c684db0a562407c0132176c20e93cb29e9434f9b600ed5806cd9fc0

in    λ ( f
        : kArrow Type Type
        )
    → λ(functor : Functor f)
    → λ(a : Type)
    → λ(coalgebra : a → f a)
    →   (   λ ( b
              : Type
              )
          → let E = Either { _1 = a, _2 = b }
            
            in    λ(mfa : Either { _1 = a, _2 = f b })
                → merge
                  { Left =
                        λ(x : a)
                      → functor.map
                        a
                        (Either { _1 = a, _2 = b })
                        E.Left
                        (coalgebra x)
                  , Right =
                      functor.map b (Either { _1 = a, _2 = b }) E.Right
                  }
                  mfa
        )
      : ./Type sha256:7064f282eb1dc7867af71cb0254c0d516799b4f456b38ab67989e8038bb5c320
        Type
        https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Function/Type sha256:44d58123a7ba6bd4f59a8f0fe8363ca585db3061ae3f369d3a26607a127f7927
        (λ(b : Type) → Either { _1 = a, _2 = b })
        f
