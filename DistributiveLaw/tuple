    let kArrow = ./../../caterwaul/Function/Kind

in  let object = Type

in  let arrow = ./../../caterwaul/Function/Type

in  let Functor = ./../../caterwaul/Functor/Endo/Type object arrow

in  let Tuple = ./../../caterwaul/Tuple/Type

in    λ(f : kArrow object object)
    → λ(functor : Functor f)
    → λ(a : object)
    → λ(algebra : arrow { _1 = f a, _2 = a })
    →   (   λ(b : object)
          → λ(fwa : f (Tuple { _1 = a, _2 = b }))
          → { _1 =
                algebra
                ( functor.map
                  (Tuple { _1 = a, _2 = b })
                  a
                  (λ(x : Tuple { _1 = a, _2 = b }) → x._1)
                  fwa
                )
            , _2 =
                functor.map
                (Tuple { _1 = a, _2 = b })
                b
                (λ(x : Tuple { _1 = a, _2 = b }) → x._2)
                fwa
            }
        )
      : ./Type object arrow f (λ(b : object) → Tuple { _1 = a, _2 = b })
