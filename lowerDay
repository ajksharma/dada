{- “Lowers” an algebra over Day convolution to an attribute grammar. It’s often
    convenient to write an algebra in terms of Day convolution, but generally
    you’re not folding a fixed-point of `Day`, so this makes the algebra more
    widely applicable.
-}
let kArrow =
      https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let object = Type

let cat =
      https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Category/Set/monoidal/cartesian sha256:b3c97e385d62b718ab11e540a98141cb81b89db0d7c1115ec11b330c596dcf01

let semigroupoid =
      https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Function/semigroupoid sha256:4827035ecdee301574a57c0dde786653eaf4724f0fb0d175a99128759e973c07

let Day =
      https://raw.githubusercontent.com/sellout/caterwaul/9e79829d7659a9e4f039e59114541489331c9737/Day/Type sha256:681b4b22f4cd4484c75a93d75c4c4a58c7d7b146d8f9e1a52602b49a8fb51f87
      object
      cat
      cat

in    λ ( f
        : kArrow object object
        )
    → λ(t : object)
    → λ(g : kArrow object object)
    → λ ( steppable
        : ./Steppable/Type sha256:7cda69d1654ef3854e389c2674a997b6a6cec8bb95d873df2d528f7510f2becb
          object
          cat.arrow
          t
          g
        )
    → λ(a : object)
    → λ(day : cat.arrow { _1 = Day { _1 = f, _2 = g } a, _2 = a })
    → λ(fta : f (t → a))
    → semigroupoid.op
      { _1 = t, _2 = a }
      (   λ(r : Type)
        → λ ( arrowsOut
            :   ∀(z : object)
              → cat.arrow { _1 = z, _2 = a }
              → cat.arrow { _1 = t, _2 = z }
              → r
            )
        → arrowsOut
          (Day { _1 = f, _2 = g } a)
          day
          ( semigroupoid.op
            { _1 = t, _2 = Day { _1 = f, _2 = g } a }
            (   λ(r : Type)
              → λ ( arrowsOut
                  : ∀(z : object) → (z → Day { _1 = f, _2 = g } a) → (t → z) → r
                  )
              → arrowsOut
                (g t)
                (   λ(gt : g t)
                  → λ(r : Type)
                  → λ ( day
                      :   ∀(b : { _1 : Type, _2 : Type })
                        → ({ _1 : b._1, _2 : b._2 } → a)
                        → { _1 : f b._1, _2 : g b._2 }
                        → r
                      )
                  → day
                    { _1 = t → a, _2 = t }
                    (λ(p : { _1 : t → a, _2 : t }) → p._1 p._2)
                    { _1 = fta, _2 = gt }
                )
                steppable.project
            )
          )
      )
